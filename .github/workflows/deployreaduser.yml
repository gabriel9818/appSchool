name: Docker Image CI/CD for Read Users Service

on:
  push:
    branches:
      - test  # Se ejecuta en la rama test
    paths:
      - 'BACKEND/gestion_usuarios/read_users/**'  # Solo cuando hay cambios en read_users
  pull_request:
    paths:
      - 'BACKEND/gestion_usuarios/read_users/**'
    branches: ["test", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout del c√≥digo
      uses: actions/checkout@v3

    - name: üîë Login en Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üõ†Ô∏è Construcci√≥n de la imagen Docker
      run: |
        docker build BACKEND/gestion_usuarios/read_users/. --file BACKEND/gestion_usuarios/read_users/Dockerfile \
          --build-arg DB_HOST=${{ secrets.DB_HOST }} \
          --build-arg DB_USER=${{ secrets.DB_USER }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --build-arg DB_NAME=${{ secrets.DB_NAME }} \
          --build-arg SERVER_PORT=${{ secrets.SERVER_PORT_READ_USERS }} \
          -t ${{ secrets.DOCKER_USERNAME }}/read_users:latest

    - name: üì§ Subir la imagen a Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/read_users:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: üöÄ Desplegar en EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_READ_USERS }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Verificar si Docker est√° instalado
          if ! command -v docker &> /dev/null; then
            echo "==> Instalando Docker"
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu
          fi

          # Detener y eliminar el contenedor anterior si existe
          echo "üõë Deteniendo y eliminando el contenedor anterior..."
          sudo docker stop read_users || true
          sudo docker rm read_users || true

          # Descargar la √∫ltima imagen desde Docker Hub
          echo "‚¨áÔ∏è Descargando la imagen m√°s reciente de Docker Hub..."
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/read_users:latest

          # Ejecutar el contenedor con el puerto 3001
          echo "üöÄ Iniciando nuevo contenedor en el puerto ${{ secrets.SERVER_PORT_READ_USERS }}..."
          sudo docker run -d \
            --name read_users \
            -p 3001:${{ secrets.SERVER_PORT_READ_USERS }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e SERVER_PORT=${{ secrets.SERVER_PORT_READ_USERS }} \
            ${{ secrets.DOCKER_USERNAME }}/read_users:latest

          # Verificar que el contenedor est√© corriendo
          if sudo docker ps -f name=read_users | grep read_users; then
            echo "‚úÖ Contenedor 'read_users' corriendo correctamente."
          else
            echo "‚ùå Error al iniciar el contenedor. Revisa los logs."
            exit 1
          fi
