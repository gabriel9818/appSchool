name: Deploy Student Registration Services to AWS

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/student_registration/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üöÄ Checkout del c√≥digo
      uses: actions/checkout@v3

    - name: üîë Acceder al servidor EC2 y desplegar
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_STUDENT_REGISTRATION }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY_STUDENT_REGISTRATION }}
        port: 22
        script: |
          echo "‚úÖ Conexi√≥n establecida con EC2"

          echo "üõ†Ô∏è Verificando si Docker y Docker Compose est√°n instalados..."
          if ! command -v docker &> /dev/null; then
            echo "üîß Instalando Docker..."
            sudo amazon-linux-extras enable docker
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
            newgrp docker
          fi

          if ! command -v docker-compose &> /dev/null; then
            echo "üîß Instalando Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          echo "üîë Iniciando sesi√≥n en Docker Hub..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          echo "üõë Eliminando contenedores e im√°genes antiguas..."
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/created_student_registration:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/delete_student_registration:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/read_student_registration:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/update_student_registration:latest || true
          docker network prune -f || true
          docker volume prune -f || true

          echo "üì¶ Movi√©ndonos al directorio del proyecto..."
          cd ~/appStudent/BACKEND/student_registration || mkdir -p ~/appStudent/BACKEND/student_registration && cd ~/appStudent/BACKEND/student_registration

          echo "üìÇ Creando archivo .env correctamente..."
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST_STUDENT_REGISTRATION }}
          DB_PORT=5432
          DB_USER=${{ secrets.DB_USER_STUDENT_REGISTRATION }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_STUDENT_REGISTRATION }}
          DB_NAME=${{ secrets.DB_NAME_STUDENT_REGISTRATION }}
          DB_SSL=true
          EOF

          echo "‚úÖ Archivo .env creado con √©xito:"
          cat ~/appStudent/BACKEND/student_registration/.env

          echo "‚¨áÔ∏è Creando nuevo docker-compose.yml..."
          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            created_student_registration:
              image: ${{ secrets.DOCKER_USERNAME }}/created_student_registration:latest
              container_name: created_student_registration
              restart: always
              environment:
                - APP_PORT=8085
              ports:
                - "8085:8085"
              env_file:
                - .env

            delete_student_registration:
              image: ${{ secrets.DOCKER_USERNAME }}/delete_student_registration:latest
              container_name: delete_student_registration
              restart: always
              environment:
                - APP_PORT=8086
              ports:
                - "8086:8086"
              env_file:
                - .env

            read_student_registration:
              image: ${{ secrets.DOCKER_USERNAME }}/read_student_registration:latest
              container_name: read_student_registration
              restart: always
              environment:
                - APP_PORT=8087
              ports:
                - "8087:8087"
              env_file:
                - .env

            update_student_registration:
              image: ${{ secrets.DOCKER_USERNAME }}/update_student_registration:latest
              container_name: update_student_registration
              restart: always
              environment:
                - APP_PORT=8088
              ports:
                - "8088:8088"
              env_file:
                - .env
          EOF

          echo "‚úÖ Archivo docker-compose.yml creado con √©xito."
          cat ~/appStudent/BACKEND/student_registration/docker-compose.yml

          echo "üì• Descargando im√°genes de Docker..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/created_student_registration:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/delete_student_registration:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/read_student_registration:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/update_student_registration:latest

          echo "üöÄ Desplegando servicios con Docker Compose..."
          docker-compose up -d --force-recreate --remove-orphans

          echo "üîç Verificando contenedores en ejecuci√≥n..."
          docker ps
