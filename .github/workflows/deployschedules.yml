name: Docker Image CI/CD for Schedules Service

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/schedules_management/**'
  pull_request:
    paths:
      - 'BACKEND/schedules_management/**'
    branches: ["test", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # üì• Paso 1: Checkout del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # üîë Paso 2: Login en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # üèóÔ∏è Paso 3: Construcci√≥n de im√°genes Docker
    - name: Build Docker images
      run: |
        services=("created_schedules" "delete_schedules" "read_schedules" "update_schedules")
        for service in "${services[@]}"; do
          echo "Building image for $service..."
          docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/$service/. \
            --file $GITHUB_WORKSPACE/BACKEND/schedules_management/$service/dockerfile \
            --build-arg DB_HOST=${{ secrets.DB_HOST_SCHEDULES }} \
            --build-arg DB_USER=${{ secrets.DB_USER_SCHEDULES }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD_SCHEDULES }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME_SCHEDULES }} \
            --build-arg DB_PORT=${{ secrets.DB_PORT_SCHEDULES }} \
            -t ${{ secrets.DOCKER_USERNAME }}/$service:latest
        done

    # üì§ Paso 4: Subir las im√°genes a Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        services=("created_schedules" "delete_schedules" "read_schedules" "update_schedules")
        for service in "${services[@]}"; do
          echo "Pushing image for $service..."
          docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # üì° Paso 1: Conectar al servidor EC2 usando SSH y desplegar los contenedores
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_SCHEDULES_MANAGEMENT }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY_SCHEDULES}}
        port: 22
        script: |
          echo "‚úÖ Conexi√≥n establecida con EC2"
          
          echo "üõ†Ô∏è Verificando si Docker est√° instalado..."
          if ! command -v docker &> /dev/null; then
            echo "üîß Instalando Docker..."
            sudo apt update -y
            sudo apt install -y docker.io docker-compose
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu
          fi

          echo "üõë Eliminando contenedores existentes..."
          docker stop created_schedules delete_schedules read_schedules update_schedules || true
          docker rm created_schedules delete_schedules read_schedules update_schedules || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest || true
          docker rmi -f ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest || true
          docker network prune -f || true

          echo "üì¶ Navegando al directorio del proyecto..."
          cd ~/appSchool/BACKEND/schedules_management || mkdir -p ~/appSchool/BACKEND/schedules_management && cd ~/appSchool/BACKEND/schedules_management

          echo "üì• Descargando im√°genes desde Docker Hub..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest

          echo "‚¨áÔ∏è Creando nuevo docker-compose.yml..."
          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            created_schedules:
              image: "${{ secrets.DOCKER_USERNAME }}/created_schedules:latest"
              container_name: created_schedules
              ports:
                - "6000:6000"
              env_file:
                - .env

            delete_schedules:
              image: "${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest"
              container_name: delete_schedules
              ports:
                - "6002:6002"
              env_file:
                - .env

            read_schedules:
              image: "${{ secrets.DOCKER_USERNAME }}/read_schedules:latest"
              container_name: read_schedules
              ports:
                - "6001:6001"
              env_file:
                - .env

            update_schedules:
              image: "${{ secrets.DOCKER_USERNAME }}/update_schedules:latest"
              container_name: update_schedules
              ports:
                - "6003:6003"
              env_file:
                - .env
          EOF

          echo "üöÄ Desplegando servicios con Docker Compose..."
          docker-compose up -d --force-recreate --remove-orphans

          echo "üîç Verificando contenedores en ejecuci√≥n..."
          docker ps

          echo "‚úÖ Despliegue completado con √©xito"
