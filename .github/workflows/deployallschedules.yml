name: Docker Image CI/CD for Schedules Microservices

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/schedules_management/**'
  pull_request:
    paths:
      - 'BACKEND/schedules_management/**'
    branches: ["test", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 📥 Paso 1: Checkout del código
    - name: Checkout code
      uses: actions/checkout@v3

    # 🛠️ Paso 2: Debug de la estructura del repositorio
    - name: Debug repository structure
      run: |
        echo "📂 Listando archivos en el workspace..."
        ls -R $GITHUB_WORKSPACE

    # 🔑 Paso 3: Login en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 🐳 Paso 4: Construcción de imágenes Docker para cada microservicio
    - name: Build Docker images
      run: |
        for service in created_schedules read_schedules update_schedules delete_schedules; do
          echo "🚀 Construyendo imagen para $service..."
          docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/$service/. \
            --file $GITHUB_WORKSPACE/BACKEND/schedules_management/$service/dockerfile \
            --build-arg DB_HOST=${{ secrets.DB_HOST_SCHEDULES }} \
            --build-arg DB_USER=${{ secrets.DB_USER_SCHEDULES }} \
            --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD_SCHEDULES }} \
            --build-arg DB_NAME=${{ secrets.DB_NAME_SCHEDULES }} \
            --build-arg SERVER_PORT=3306 \
            -t ${{ secrets.DOCKER_USERNAME }}/$service:latest
        done

    # 📤 Paso 5: Subir imágenes a Docker Hub
    - name: Push Docker images to Docker Hub
      run: |
        for service in created_schedules read_schedules update_schedules delete_schedules; do
          echo "📤 Subiendo imagen para $service..."
          docker push ${{ secrets.DOCKER_USERNAME }}/$service:latest
        done

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # 📡 Paso 1: Conectar a EC2 usando SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_SCHEDULES }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY_SCHEDULES }}
        port: 22
        script: |
          echo "🔄 Creando directorio en EC2..."
          mkdir -p ~/appSchedules/BACKEND/schedules_management

          echo "📝 Creando archivo .env global..."
          cat <<EOF > ~/appSchedules/BACKEND/schedules_management/.env
          DB_USER=${{ secrets.DB_USER_SCHEDULES }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_SCHEDULES }}
          DB_HOST=${{ secrets.DB_HOST_SCHEDULES }}
          DB_PORT=3306
          DB_NAME=${{ secrets.DB_NAME_SCHEDULES }}
          EOF

          echo "📦 Verificando contenido del .env..."
          cat ~/appSchedules/BACKEND/schedules_management/.env

          echo "🛠️ Instalando Docker si es necesario..."
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi

          echo "🛠️ Instalando Docker Compose si es necesario..."
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          echo "🛑 Deteniendo contenedores antiguos..."
          sudo docker-compose -f ~/appSchedules/BACKEND/schedules_management/docker-compose.yml down

          echo "⬇️ Descargando últimas imágenes..."
          for service in created_schedules read_schedules update_schedules delete_schedules; do
            echo "📥 Descargando imagen para $service..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/$service:latest
          done

          echo "🚀 Levantando los contenedores con Docker Compose..."
          sudo docker-compose -f ~/appSchedules/BACKEND/schedules_management/docker-compose.yml up -d

          echo "🔍 Verificando contenedores..."
          sudo docker ps
