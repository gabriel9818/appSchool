name: Docker Image CI/CD for Schedules Microservices

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/schedules_management/**'
  pull_request:
    paths:
      - 'BACKEND/schedules_management/**'
    branches: ["test", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [created_schedules, read_schedules, update_schedules, delete_schedules]

    steps:
    # üì• Paso 1: Checkout del repositorio
    - name: Checkout code
      uses: actions/checkout@v3

    # üõ†Ô∏è Paso 2: Verificar estructura del repositorio en GitHub Actions
    - name: Debug repository structure
      run: |
        echo "üìÇ Listando archivos en el workspace..."
        ls -R $GITHUB_WORKSPACE

    # üîë Paso 3: Login en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # üê≥ Paso 4: Construcci√≥n de la imagen Docker
    - name: Build Docker image for ${{ matrix.service }}
      run: |
        docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/${{ matrix.service }} \
          --file $GITHUB_WORKSPACE/BACKEND/schedules_management/${{ matrix.service }}/dockerfile \
          --build-arg DB_HOST=${{ secrets.DB_HOST_SCHEDULES }} \
          --build-arg DB_USER=${{ secrets.DB_USER_SCHEDULES }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD_SCHEDULES }} \
          --build-arg DB_NAME=${{ secrets.DB_NAME_SCHEDULES }} \
          -t ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest

    # üì§ Paso 5: Subir la imagen a Docker Hub
    - name: Push Docker image to Docker Hub for ${{ matrix.service }}
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    # üì° Paso 1: Conectar al servidor EC2 usando SSH
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_SCHEDULES }}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_KEY_SCHEDULES }}
        port: 22
        script: |
          echo "üîÑ Creando directorio en EC2..."
          mkdir -p ~/appSchedules/BACKEND/schedules_management

          echo "üìù Creando archivo .env global..."
          cat <<EOF > ~/appSchedules/BACKEND/schedules_management/.env
          DB_USER=${{ secrets.DB_USER_SCHEDULES }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_SCHEDULES }}
          DB_HOST=${{ secrets.DB_HOST_SCHEDULES }}
          DB_PORT=3306
          DB_NAME=${{ secrets.DB_NAME_SCHEDULES }}
          EOF

          echo "üì¶ Verificando contenido del .env..."
          cat ~/appSchedules/BACKEND/schedules_management/.env

          echo "üõ†Ô∏è Instalando Docker si es necesario..."
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
          fi

          echo "üõë Deteniendo contenedores antiguos..."
          sudo docker-compose -f ~/appSchedules/BACKEND/schedules_management/docker-compose.yml down

          echo "‚¨áÔ∏è Descargando √∫ltimas im√°genes..."
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest

          echo "üöÄ Levantando los contenedores con Docker Compose..."
          sudo docker-compose -f ~/appSchedules/BACKEND/schedules_management/docker-compose.yml up -d

          echo "üîç Verificando contenedores..."
          sudo docker ps
