name: Deploy Teacher Management Services

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/teacher_management/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Images
      run: |
        docker build $GITHUB_WORKSPACE/BACKEND/teacher_management/created_teachers/. \
          -t ${{ secrets.DOCKER_USERNAME }}/created_teachers:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/created_teachers:latest
        
        docker build $GITHUB_WORKSPACE/BACKEND/teacher_management/delete_teachers/. \
          -t ${{ secrets.DOCKER_USERNAME }}/delete_teachers:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/delete_teachers:latest

        docker build $GITHUB_WORKSPACE/BACKEND/teacher_management/read_teachers/. \
          -t ${{ secrets.DOCKER_USERNAME }}/read_teachers:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/read_teachers:latest

        docker build $GITHUB_WORKSPACE/BACKEND/teacher_management/update_teachers/. \
          -t ${{ secrets.DOCKER_USERNAME }}/update_teachers:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/update_teachers:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_TEACHER_MANAGEMENT }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY_TEACHER }}
        port: 22
        script: |
          echo "üîç Verificando acceso SSH..."
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST_TEACHER_MANAGEMENT }} "echo '‚úÖ Conexi√≥n SSH exitosa'"

          echo "üì¶ Movi√©ndonos al directorio del proyecto..."
          cd ~/appSchool/BACKEND/teacher_management || mkdir -p ~/appSchool/BACKEND/teacher_management && cd ~/appSchool/BACKEND/teacher_management

          echo "üõ†Ô∏è Verificando si Docker est√° instalado..."
          if ! command -v docker &> /dev/null; then
            echo "üîß Instalando Docker..."
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu
          fi

          echo "üõ†Ô∏è Verificando si Docker Compose est√° instalado..."
          if ! command -v docker-compose &> /dev/null; then
            echo "üîß Instalando Docker Compose..."
            sudo apt install -y docker-compose
          fi

          echo "üõë Deteniendo contenedores existentes..."
          sudo docker-compose down || true

          echo "‚¨áÔ∏è Creando archivos .env para cada microservicio..."
          mkdir -p ~/appSchool/BACKEND/teacher_management

          cat <<EOF > ~/appSchool/BACKEND/teacher_management/created_teachers/.env
          DB_HOST=${{ secrets.DB_HOST_TEACHER }}
          DB_PORT=${{ secrets.DB_PORT_TEACHER }}
          DB_USER=${{ secrets.DB_USER_TEACHER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_TEACHER }}
          DB_NAME=${{ secrets.DB_NAME_TEACHER }}
          EOF

          cat <<EOF > ~/appSchool/BACKEND/teacher_management/delete_teachers/.env
          DB_HOST=${{ secrets.DB_HOST_TEACHER }}
          DB_PORT=${{ secrets.DB_PORT_TEACHER }}
          DB_USER=${{ secrets.DB_USER_TEACHER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_TEACHER }}
          DB_NAME=${{ secrets.DB_NAME_TEACHER }}
          EOF

          cat <<EOF > ~/appSchool/BACKEND/teacher_management/read_teachers/.env
          DB_HOST=${{ secrets.DB_HOST_TEACHER }}
          DB_PORT=${{ secrets.DB_PORT_TEACHER }}
          DB_USER=${{ secrets.DB_USER_TEACHER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_TEACHER }}
          DB_NAME=${{ secrets.DB_NAME_TEACHER }}
          EOF

          cat <<EOF > ~/appSchool/BACKEND/teacher_management/update_teachers/.env
          DB_HOST=${{ secrets.DB_HOST_TEACHER }}
          DB_PORT=${{ secrets.DB_PORT_TEACHER }}
          DB_USER=${{ secrets.DB_USER_TEACHER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD_TEACHER }}
          DB_NAME=${{ secrets.DB_NAME_TEACHER }}
          EOF

          echo "‚¨áÔ∏è Creando archivo docker-compose.yml..."
          cat <<EOF > docker-compose.yml
          version: '3.8'

          services:
            created_teachers:
              image: "\${DOCKER_USERNAME}/created_teachers:latest"
              container_name: created_teachers
              restart: always
              ports:
                - "8010:8010"
              env_file:
                - ./created_teachers/.env

            delete_teachers:
              image: "\${DOCKER_USERNAME}/delete_teachers:latest"
              container_name: delete_teachers
              restart: always
              ports:
                - "8013:8013"
              env_file:
                - ./delete_teachers/.env

            read_teachers:
              image: "\${DOCKER_USERNAME}/read_teachers:latest"
              container_name: read_teachers
              restart: always
              ports:
                - "8011:8011"
              env_file:
                - ./read_teachers/.env

            update_teachers:
              image: "\${DOCKER_USERNAME}/update_teachers:latest"
              container_name: update_teachers
              restart: always
              ports:
                - "8012:8012"
              env_file:
                - ./update_teachers/.env
          EOF

          echo "üöÄ Desplegando servicios con Docker Compose..."
          sudo docker-compose up -d

          echo "üîç Verificando contenedores en ejecuci√≥n..."
          sudo docker ps
