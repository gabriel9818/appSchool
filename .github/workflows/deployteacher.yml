name: Docker CI/CD for Schedules Management Services

on:
  push:
    branches:
      - test
    paths:
      - 'BACKEND/schedules_management/**'
  pull_request:
    paths:
      - 'BACKEND/schedules_management/**'
    branches: ["test", "main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: üõ†Ô∏è Clonar el c√≥digo
      uses: actions/checkout@v3

    - name: üìÇ Depurar estructura del repositorio
      run: |
        echo "üìÇ Listando archivos en el workspace..."
        ls -R $GITHUB_WORKSPACE

    - name: üîë Iniciar sesi√≥n en Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üì¶ Construir y subir im√°genes Docker
      run: |
        docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/created_schedules/. \
          -t ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest
        
        docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/delete_schedules/. \
          -t ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest

        docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/read_schedules/. \
          -t ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest

        docker build $GITHUB_WORKSPACE/BACKEND/schedules_management/update_schedules/. \
          -t ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: üöÄ Desplegar en EC2
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST_SCHEDULES }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY_SCHEDULES }}
        port: 22
        script: |
          echo "üîÑ Exportando variables de entorno..."
          echo "export DB_HOST=${{ secrets.DB_HOST }}" >> ~/.bashrc
          echo "export DB_USER=${{ secrets.DB_USER }}" >> ~/.bashrc
          echo "export DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ~/.bashrc
          echo "export DB_NAME=${{ secrets.DB_NAME }}" >> ~/.bashrc
          echo "export DB_PORT=${{ secrets.DB_PORT }}" >> ~/.bashrc
          source ~/.bashrc

          echo "üì¶ Movi√©ndonos al directorio del proyecto..."
          cd ~/appSchool/BACKEND/schedules_management || mkdir -p ~/appSchool/BACKEND/schedules_management && cd ~/appSchool/BACKEND/schedules_management

          echo "üõ†Ô∏è Verificando si Docker est√° instalado..."
          if ! command -v docker &> /dev/null; then
            echo "üîß Instalando Docker..."
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo usermod -aG docker ubuntu
          fi

          echo "üõë Deteniendo contenedores existentes..."
          sudo docker compose down || sudo docker-compose down

          echo "‚¨áÔ∏è Creando nuevo docker-compose.yml..."
          cat <<EOF > docker-compose.yml
          version: '3.8'

          services:
            created_schedules:
              image: ${{ secrets.DOCKER_USERNAME }}/created_schedules:latest
              container_name: created_schedules
              restart: always
              ports:
                - "6000:6000"
              environment:
                DB_HOST: \$DB_HOST
                DB_PORT: \$DB_PORT
                DB_USER: \$DB_USER
                DB_PASSWORD: \$DB_PASSWORD
                DB_NAME: \$DB_NAME

            delete_schedules:
              image: ${{ secrets.DOCKER_USERNAME }}/delete_schedules:latest
              container_name: delete_schedules
              restart: always
              ports:
                - "6002:6002"
              environment:
                DB_HOST: \$DB_HOST
                DB_PORT: \$DB_PORT
                DB_USER: \$DB_USER
                DB_PASSWORD: \$DB_PASSWORD
                DB_NAME: \$DB_NAME

            read_schedules:
              image: ${{ secrets.DOCKER_USERNAME }}/read_schedules:latest
              container_name: read_schedules
              restart: always
              ports:
                - "6001:6001"
              environment:
                DB_HOST: \$DB_HOST
                DB_PORT: \$DB_PORT
                DB_USER: \$DB_USER
                DB_PASSWORD: \$DB_PASSWORD
                DB_NAME: \$DB_NAME

            update_schedules:
              image: ${{ secrets.DOCKER_USERNAME }}/update_schedules:latest
              container_name: update_schedules
              restart: always
              ports:
                - "6003:6003"
              environment:
                DB_HOST: \$DB_HOST
                DB_PORT: \$DB_PORT
                DB_USER: \$DB_USER
                DB_PASSWORD: \$DB_PASSWORD
                DB_NAME: \$DB_NAME
          EOF

          echo "üöÄ Desplegando servicios con Docker Compose..."
          sudo docker compose up -d || sudo docker-compose up -d

          echo "üîç Verificando contenedores en ejecuci√≥n..."
          sudo docker ps
